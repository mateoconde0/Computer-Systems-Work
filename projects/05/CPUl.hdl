// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    	//initial mux and registers 
	Not(in=instruction[15],out=not15);
	Mux16(a=aluOut, b=instruction, sel=not15,out=opOut);// instruction and aluOut mux 
	Or(a=not15,b=instruction[5],out=aSel);
	ARegister(in=opOut,load=aSel,out=aOut);//A register
	DRegister(in=aluOut,load=instruction[4],out=dOut); //D register 
	Mux16(a=aOut, b=inM, sel=instruction[12],out=amOut);//mux for A register and inM 
	ALU( x=dOut ,y=amOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=zrOut,ng=ngOut,out=aluOut);// ALU	
	//jump logic 
	//inverted flags
	Not(in=zrOut,out=notZrOut);
	Not(in=ngOut,out=notNgOut);
	//logic: 
	And(a=notZrOut,b=notNgOut,out=gtOut);
	Or(a=zrOut,b=ngOut,out=ltOut);
	//Jump Mux 
	Mux8Way(a=false,b=gtOut,c=zrOut,d=notNgOut,e=ngOut,f=notZrOut,g=ltOut,h=true,sel=instruction[0..2],out=jumpLoadOut);
	And(a=jumpLoadOut,b=instruction[15],out=jumpLoadOutD);
	Not(in=jumpLoadOut,out=notJumpLoadOut);
	Or(a=not15,b=notJumpLoadOut,out=incBit);

	//pass throughs for outputs 
	And16(a=aluOut,b=aluOut,out=outM); // outM 
	And15(a=aOut,b=aOut,out=addressM); //addressM
	And(a=instruction[15], b=instruction[3],out=writeM); // writeM 

	PC(in=aOut,load=jumpLoadOutD,inc=incBit,reset=reset,out=pcOut); // Program counter 
	And15(a=pcOut,b=pcOut,out=pc);


}